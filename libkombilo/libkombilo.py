# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libkombilo
else:
    import _libkombilo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libkombilo.delete_SwigPyIterator

    def value(self):
        return _libkombilo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libkombilo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libkombilo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libkombilo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libkombilo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libkombilo.SwigPyIterator_copy(self)

    def next(self):
        return _libkombilo.SwigPyIterator_next(self)

    def __next__(self):
        return _libkombilo.SwigPyIterator___next__(self)

    def previous(self):
        return _libkombilo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libkombilo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libkombilo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libkombilo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libkombilo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libkombilo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libkombilo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libkombilo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _libkombilo:
_libkombilo.SwigPyIterator_swigregister(SwigPyIterator)
class vectorc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libkombilo.vectorc_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libkombilo.vectorc___nonzero__(self)

    def __bool__(self):
        return _libkombilo.vectorc___bool__(self)

    def __len__(self):
        return _libkombilo.vectorc___len__(self)

    def __getslice__(self, i, j):
        return _libkombilo.vectorc___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libkombilo.vectorc___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libkombilo.vectorc___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libkombilo.vectorc___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libkombilo.vectorc___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libkombilo.vectorc___setitem__(self, *args)

    def pop(self):
        return _libkombilo.vectorc_pop(self)

    def append(self, x):
        return _libkombilo.vectorc_append(self, x)

    def empty(self):
        return _libkombilo.vectorc_empty(self)

    def size(self):
        return _libkombilo.vectorc_size(self)

    def swap(self, v):
        return _libkombilo.vectorc_swap(self, v)

    def begin(self):
        return _libkombilo.vectorc_begin(self)

    def end(self):
        return _libkombilo.vectorc_end(self)

    def rbegin(self):
        return _libkombilo.vectorc_rbegin(self)

    def rend(self):
        return _libkombilo.vectorc_rend(self)

    def clear(self):
        return _libkombilo.vectorc_clear(self)

    def get_allocator(self):
        return _libkombilo.vectorc_get_allocator(self)

    def pop_back(self):
        return _libkombilo.vectorc_pop_back(self)

    def erase(self, *args):
        return _libkombilo.vectorc_erase(self, *args)

    def __init__(self, *args):
        _libkombilo.vectorc_swiginit(self, _libkombilo.new_vectorc(*args))

    def push_back(self, x):
        return _libkombilo.vectorc_push_back(self, x)

    def front(self):
        return _libkombilo.vectorc_front(self)

    def back(self):
        return _libkombilo.vectorc_back(self)

    def assign(self, n, x):
        return _libkombilo.vectorc_assign(self, n, x)

    def resize(self, *args):
        return _libkombilo.vectorc_resize(self, *args)

    def insert(self, *args):
        return _libkombilo.vectorc_insert(self, *args)

    def reserve(self, n):
        return _libkombilo.vectorc_reserve(self, n)

    def capacity(self):
        return _libkombilo.vectorc_capacity(self)
    __swig_destroy__ = _libkombilo.delete_vectorc

# Register vectorc in _libkombilo:
_libkombilo.vectorc_swigregister(vectorc)
class vectors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libkombilo.vectors_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libkombilo.vectors___nonzero__(self)

    def __bool__(self):
        return _libkombilo.vectors___bool__(self)

    def __len__(self):
        return _libkombilo.vectors___len__(self)

    def __getslice__(self, i, j):
        return _libkombilo.vectors___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libkombilo.vectors___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libkombilo.vectors___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libkombilo.vectors___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libkombilo.vectors___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libkombilo.vectors___setitem__(self, *args)

    def pop(self):
        return _libkombilo.vectors_pop(self)

    def append(self, x):
        return _libkombilo.vectors_append(self, x)

    def empty(self):
        return _libkombilo.vectors_empty(self)

    def size(self):
        return _libkombilo.vectors_size(self)

    def swap(self, v):
        return _libkombilo.vectors_swap(self, v)

    def begin(self):
        return _libkombilo.vectors_begin(self)

    def end(self):
        return _libkombilo.vectors_end(self)

    def rbegin(self):
        return _libkombilo.vectors_rbegin(self)

    def rend(self):
        return _libkombilo.vectors_rend(self)

    def clear(self):
        return _libkombilo.vectors_clear(self)

    def get_allocator(self):
        return _libkombilo.vectors_get_allocator(self)

    def pop_back(self):
        return _libkombilo.vectors_pop_back(self)

    def erase(self, *args):
        return _libkombilo.vectors_erase(self, *args)

    def __init__(self, *args):
        _libkombilo.vectors_swiginit(self, _libkombilo.new_vectors(*args))

    def push_back(self, x):
        return _libkombilo.vectors_push_back(self, x)

    def front(self):
        return _libkombilo.vectors_front(self)

    def back(self):
        return _libkombilo.vectors_back(self)

    def assign(self, n, x):
        return _libkombilo.vectors_assign(self, n, x)

    def resize(self, *args):
        return _libkombilo.vectors_resize(self, *args)

    def insert(self, *args):
        return _libkombilo.vectors_insert(self, *args)

    def reserve(self, n):
        return _libkombilo.vectors_reserve(self, n)

    def capacity(self):
        return _libkombilo.vectors_capacity(self)
    __swig_destroy__ = _libkombilo.delete_vectors

# Register vectors in _libkombilo:
_libkombilo.vectors_swigregister(vectors)
class vectori(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libkombilo.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libkombilo.vectori___nonzero__(self)

    def __bool__(self):
        return _libkombilo.vectori___bool__(self)

    def __len__(self):
        return _libkombilo.vectori___len__(self)

    def __getslice__(self, i, j):
        return _libkombilo.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libkombilo.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libkombilo.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libkombilo.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libkombilo.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libkombilo.vectori___setitem__(self, *args)

    def pop(self):
        return _libkombilo.vectori_pop(self)

    def append(self, x):
        return _libkombilo.vectori_append(self, x)

    def empty(self):
        return _libkombilo.vectori_empty(self)

    def size(self):
        return _libkombilo.vectori_size(self)

    def swap(self, v):
        return _libkombilo.vectori_swap(self, v)

    def begin(self):
        return _libkombilo.vectori_begin(self)

    def end(self):
        return _libkombilo.vectori_end(self)

    def rbegin(self):
        return _libkombilo.vectori_rbegin(self)

    def rend(self):
        return _libkombilo.vectori_rend(self)

    def clear(self):
        return _libkombilo.vectori_clear(self)

    def get_allocator(self):
        return _libkombilo.vectori_get_allocator(self)

    def pop_back(self):
        return _libkombilo.vectori_pop_back(self)

    def erase(self, *args):
        return _libkombilo.vectori_erase(self, *args)

    def __init__(self, *args):
        _libkombilo.vectori_swiginit(self, _libkombilo.new_vectori(*args))

    def push_back(self, x):
        return _libkombilo.vectori_push_back(self, x)

    def front(self):
        return _libkombilo.vectori_front(self)

    def back(self):
        return _libkombilo.vectori_back(self)

    def assign(self, n, x):
        return _libkombilo.vectori_assign(self, n, x)

    def resize(self, *args):
        return _libkombilo.vectori_resize(self, *args)

    def insert(self, *args):
        return _libkombilo.vectori_insert(self, *args)

    def reserve(self, n):
        return _libkombilo.vectori_reserve(self, n)

    def capacity(self):
        return _libkombilo.vectori_capacity(self)
    __swig_destroy__ = _libkombilo.delete_vectori

# Register vectori in _libkombilo:
_libkombilo.vectori_swigregister(vectori)
class pairii(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libkombilo.pairii_swiginit(self, _libkombilo.new_pairii(*args))
    first = property(_libkombilo.pairii_first_get, _libkombilo.pairii_first_set)
    second = property(_libkombilo.pairii_second_get, _libkombilo.pairii_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _libkombilo.delete_pairii

# Register pairii in _libkombilo:
_libkombilo.pairii_swigregister(pairii)
class vectorii(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libkombilo.vectorii_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libkombilo.vectorii___nonzero__(self)

    def __bool__(self):
        return _libkombilo.vectorii___bool__(self)

    def __len__(self):
        return _libkombilo.vectorii___len__(self)

    def __getslice__(self, i, j):
        return _libkombilo.vectorii___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libkombilo.vectorii___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libkombilo.vectorii___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libkombilo.vectorii___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libkombilo.vectorii___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libkombilo.vectorii___setitem__(self, *args)

    def pop(self):
        return _libkombilo.vectorii_pop(self)

    def append(self, x):
        return _libkombilo.vectorii_append(self, x)

    def empty(self):
        return _libkombilo.vectorii_empty(self)

    def size(self):
        return _libkombilo.vectorii_size(self)

    def swap(self, v):
        return _libkombilo.vectorii_swap(self, v)

    def begin(self):
        return _libkombilo.vectorii_begin(self)

    def end(self):
        return _libkombilo.vectorii_end(self)

    def rbegin(self):
        return _libkombilo.vectorii_rbegin(self)

    def rend(self):
        return _libkombilo.vectorii_rend(self)

    def clear(self):
        return _libkombilo.vectorii_clear(self)

    def get_allocator(self):
        return _libkombilo.vectorii_get_allocator(self)

    def pop_back(self):
        return _libkombilo.vectorii_pop_back(self)

    def erase(self, *args):
        return _libkombilo.vectorii_erase(self, *args)

    def __init__(self, *args):
        _libkombilo.vectorii_swiginit(self, _libkombilo.new_vectorii(*args))

    def push_back(self, x):
        return _libkombilo.vectorii_push_back(self, x)

    def front(self):
        return _libkombilo.vectorii_front(self)

    def back(self):
        return _libkombilo.vectorii_back(self)

    def assign(self, n, x):
        return _libkombilo.vectorii_assign(self, n, x)

    def resize(self, *args):
        return _libkombilo.vectorii_resize(self, *args)

    def insert(self, *args):
        return _libkombilo.vectorii_insert(self, *args)

    def reserve(self, n):
        return _libkombilo.vectorii_reserve(self, n)

    def capacity(self):
        return _libkombilo.vectorii_capacity(self)
    __swig_destroy__ = _libkombilo.delete_vectorii

# Register vectorii in _libkombilo:
_libkombilo.vectorii_swigregister(vectorii)
class mapsvi(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libkombilo.mapsvi_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libkombilo.mapsvi___nonzero__(self)

    def __bool__(self):
        return _libkombilo.mapsvi___bool__(self)

    def __len__(self):
        return _libkombilo.mapsvi___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _libkombilo.mapsvi___getitem__(self, key)

    def __delitem__(self, key):
        return _libkombilo.mapsvi___delitem__(self, key)

    def has_key(self, key):
        return _libkombilo.mapsvi_has_key(self, key)

    def keys(self):
        return _libkombilo.mapsvi_keys(self)

    def values(self):
        return _libkombilo.mapsvi_values(self)

    def items(self):
        return _libkombilo.mapsvi_items(self)

    def __contains__(self, key):
        return _libkombilo.mapsvi___contains__(self, key)

    def key_iterator(self):
        return _libkombilo.mapsvi_key_iterator(self)

    def value_iterator(self):
        return _libkombilo.mapsvi_value_iterator(self)

    def __setitem__(self, *args):
        return _libkombilo.mapsvi___setitem__(self, *args)

    def asdict(self):
        return _libkombilo.mapsvi_asdict(self)

    def __init__(self, *args):
        _libkombilo.mapsvi_swiginit(self, _libkombilo.new_mapsvi(*args))

    def empty(self):
        return _libkombilo.mapsvi_empty(self)

    def size(self):
        return _libkombilo.mapsvi_size(self)

    def swap(self, v):
        return _libkombilo.mapsvi_swap(self, v)

    def begin(self):
        return _libkombilo.mapsvi_begin(self)

    def end(self):
        return _libkombilo.mapsvi_end(self)

    def rbegin(self):
        return _libkombilo.mapsvi_rbegin(self)

    def rend(self):
        return _libkombilo.mapsvi_rend(self)

    def clear(self):
        return _libkombilo.mapsvi_clear(self)

    def get_allocator(self):
        return _libkombilo.mapsvi_get_allocator(self)

    def count(self, x):
        return _libkombilo.mapsvi_count(self, x)

    def erase(self, *args):
        return _libkombilo.mapsvi_erase(self, *args)

    def find(self, x):
        return _libkombilo.mapsvi_find(self, x)

    def lower_bound(self, x):
        return _libkombilo.mapsvi_lower_bound(self, x)

    def upper_bound(self, x):
        return _libkombilo.mapsvi_upper_bound(self, x)
    __swig_destroy__ = _libkombilo.delete_mapsvi

# Register mapsvi in _libkombilo:
_libkombilo.mapsvi_swigregister(mapsvi)
class SGFError(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libkombilo.SGFError_swiginit(self, _libkombilo.new_SGFError())
    __swig_destroy__ = _libkombilo.delete_SGFError

# Register SGFError in _libkombilo:
_libkombilo.SGFError_swigregister(SGFError)
class ExtendedMoveNumber(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    length = property(_libkombilo.ExtendedMoveNumber_length_get, _libkombilo.ExtendedMoveNumber_length_set)
    data = property(_libkombilo.ExtendedMoveNumber_data_get, _libkombilo.ExtendedMoveNumber_data_set)

    def __init__(self, *args):
        _libkombilo.ExtendedMoveNumber_swiginit(self, _libkombilo.new_ExtendedMoveNumber(*args))
    __swig_destroy__ = _libkombilo.delete_ExtendedMoveNumber

    def next(self):
        return _libkombilo.ExtendedMoveNumber_next(self)

    def down(self):
        return _libkombilo.ExtendedMoveNumber_down(self)

    def total_move_num(self):
        return _libkombilo.ExtendedMoveNumber_total_move_num(self)

# Register ExtendedMoveNumber in _libkombilo:
_libkombilo.ExtendedMoveNumber_swigregister(ExtendedMoveNumber)

def SGFescape(s):
    return _libkombilo.SGFescape(s)
class PropValue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libkombilo.PropValue_swiginit(self, _libkombilo.new_PropValue(*args))
    __swig_destroy__ = _libkombilo.delete_PropValue
    IDcomplete = property(_libkombilo.PropValue_IDcomplete_get, _libkombilo.PropValue_IDcomplete_set)
    pv = property(_libkombilo.PropValue_pv_get, _libkombilo.PropValue_pv_set)

# Register PropValue in _libkombilo:
_libkombilo.PropValue_swigregister(PropValue)
class Node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    previous = property(_libkombilo.Node_previous_get, _libkombilo.Node_previous_set)
    next = property(_libkombilo.Node_next_get, _libkombilo.Node_next_set)
    up = property(_libkombilo.Node_up_get, _libkombilo.Node_up_set)
    down = property(_libkombilo.Node_down_get, _libkombilo.Node_down_set)
    numChildren = property(_libkombilo.Node_numChildren_get, _libkombilo.Node_numChildren_set)
    SGFstring = property(_libkombilo.Node_SGFstring_get, _libkombilo.Node_SGFstring_set)
    parsed = property(_libkombilo.Node_parsed_get, _libkombilo.Node_parsed_set)

    def gpv(self, prop):
        return _libkombilo.Node_gpv(self, prop)

    def get_property_value(self, prop):
        return _libkombilo.Node_get_property_value(self, prop)

    def set_property_value(self, IDcomplete, propValue):
        return _libkombilo.Node_set_property_value(self, IDcomplete, propValue)

    def add_property_value(self, IDcomplete, propValue):
        return _libkombilo.Node_add_property_value(self, IDcomplete, propValue)

    def del_property_value(self, IDcomplete):
        return _libkombilo.Node_del_property_value(self, IDcomplete)

    def keys(self):
        return _libkombilo.Node_keys(self)
    posyD = property(_libkombilo.Node_posyD_get, _libkombilo.Node_posyD_set)

    def __init__(self, prev, SGFst):
        _libkombilo.Node_swiginit(self, _libkombilo.new_Node(prev, SGFst))
    __swig_destroy__ = _libkombilo.delete_Node

    def get_move_number(self):
        return _libkombilo.Node_get_move_number(self)

    def parseNode(self):
        return _libkombilo.Node_parseNode(self)
    sloppy = property(_libkombilo.Node_sloppy_get, _libkombilo.Node_sloppy_set)
    level = property(_libkombilo.Node_level_get, _libkombilo.Node_level_set)

# Register Node in _libkombilo:
_libkombilo.Node_swigregister(Node)
cvar = _libkombilo.cvar


def parseRootNode(n, tags):
    return _libkombilo.parseRootNode(n, tags)
class Cursor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sgf, sloppy):
        _libkombilo.Cursor_swiginit(self, _libkombilo.new_Cursor(sgf, sloppy))
    __swig_destroy__ = _libkombilo.delete_Cursor
    atStart = property(_libkombilo.Cursor_atStart_get, _libkombilo.Cursor_atStart_set)
    atEnd = property(_libkombilo.Cursor_atEnd_get, _libkombilo.Cursor_atEnd_set)
    height = property(_libkombilo.Cursor_height_get, _libkombilo.Cursor_height_set)
    width = property(_libkombilo.Cursor_width_get, _libkombilo.Cursor_width_set)
    root = property(_libkombilo.Cursor_root_get, _libkombilo.Cursor_root_set)
    currentN = property(_libkombilo.Cursor_currentN_get, _libkombilo.Cursor_currentN_set)
    posx = property(_libkombilo.Cursor_posx_get, _libkombilo.Cursor_posx_set)
    posy = property(_libkombilo.Cursor_posy_get, _libkombilo.Cursor_posy_set)

    def parse(self, s):
        return _libkombilo.Cursor_parse(self, s)

    def game(self, n):
        return _libkombilo.Cursor_game(self, n)

    def next(self, n=0):
        return _libkombilo.Cursor_next(self, n)

    def previous(self):
        return _libkombilo.Cursor_previous(self)

    def getRootNode(self, n):
        return _libkombilo.Cursor_getRootNode(self, n)

    def outputVar(self, node):
        return _libkombilo.Cursor_outputVar(self, node)

    def output(self):
        return _libkombilo.Cursor_output(self)

    def add(self, st):
        return _libkombilo.Cursor_add(self, st)

    def delVariation(self, node):
        return _libkombilo.Cursor_delVariation(self, node)

    def setFlags(self):
        return _libkombilo.Cursor_setFlags(self)

# Register Cursor in _libkombilo:
_libkombilo.Cursor_swigregister(Cursor)

def nodeToString(data):
    return _libkombilo.nodeToString(data)
class BoardError(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libkombilo.BoardError_swiginit(self, _libkombilo.new_BoardError())
    __swig_destroy__ = _libkombilo.delete_BoardError

# Register BoardError in _libkombilo:
_libkombilo.BoardError_swigregister(BoardError)
class MoveNC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_libkombilo.MoveNC_x_get, _libkombilo.MoveNC_x_set)
    y = property(_libkombilo.MoveNC_y_get, _libkombilo.MoveNC_y_set)
    color = property(_libkombilo.MoveNC_color_get, _libkombilo.MoveNC_color_set)

    def __init__(self, *args):
        _libkombilo.MoveNC_swiginit(self, _libkombilo.new_MoveNC(*args))

    def __eq__(self, mnc):
        return _libkombilo.MoveNC___eq__(self, mnc)
    __swig_destroy__ = _libkombilo.delete_MoveNC

# Register MoveNC in _libkombilo:
_libkombilo.MoveNC_swigregister(MoveNC)
AB = cvar.AB
AW = cvar.AW
AEB = cvar.AEB
AEW = cvar.AEW

class Move(MoveNC):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libkombilo.Move_swiginit(self, _libkombilo.new_Move(*args))
    __swig_destroy__ = _libkombilo.delete_Move
    captures = property(_libkombilo.Move_captures_get, _libkombilo.Move_captures_set)

# Register Move in _libkombilo:
_libkombilo.Move_swigregister(Move)
class abstractBoard(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    boardsize = property(_libkombilo.abstractBoard_boardsize_get, _libkombilo.abstractBoard_boardsize_set)
    undostack = property(_libkombilo.abstractBoard_undostack_get, _libkombilo.abstractBoard_undostack_set)

    def __init__(self, *args):
        _libkombilo.abstractBoard_swiginit(self, _libkombilo.new_abstractBoard(*args))
    __swig_destroy__ = _libkombilo.delete_abstractBoard

    def clear(self):
        return _libkombilo.abstractBoard_clear(self)

    def play(self, x, y, color):
        return _libkombilo.abstractBoard_play(self, x, y, color)

    def undo(self, n=1):
        return _libkombilo.abstractBoard_undo(self, n)

    def remove(self, x, y, removeFromUndostack):
        return _libkombilo.abstractBoard_remove(self, x, y, removeFromUndostack)

    def getStatus(self, x, y):
        return _libkombilo.abstractBoard_getStatus(self, x, y)

    def setStatus(self, x, y, val):
        return _libkombilo.abstractBoard_setStatus(self, x, y, val)

    def len_cap_last(self):
        return _libkombilo.abstractBoard_len_cap_last(self)

    def undostack_append_pass(self):
        return _libkombilo.abstractBoard_undostack_append_pass(self)

    def undostack_top_pos(self):
        return _libkombilo.abstractBoard_undostack_top_pos(self)

    def undostack_top_color(self):
        return _libkombilo.abstractBoard_undostack_top_color(self)

    def undostack_top_captures(self):
        return _libkombilo.abstractBoard_undostack_top_captures(self)

    def undostack_push(self, m):
        return _libkombilo.abstractBoard_undostack_push(self, m)

    def undostack_pop(self):
        return _libkombilo.abstractBoard_undostack_pop(self)

# Register abstractBoard in _libkombilo:
_libkombilo.abstractBoard_swigregister(abstractBoard)

def flipped_sig(f, sig, boardsize):
    return _libkombilo.flipped_sig(f, sig, boardsize)

def symmetrize(sig, boardsize):
    return _libkombilo.symmetrize(sig, boardsize)
class PatternError(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libkombilo.PatternError_swiginit(self, _libkombilo.new_PatternError())
    __swig_destroy__ = _libkombilo.delete_PatternError

# Register PatternError in _libkombilo:
_libkombilo.PatternError_swigregister(PatternError)
NOT_HASHABLE = cvar.NOT_HASHABLE
NO_CONT = cvar.NO_CONT
CORNER_NW_PATTERN = cvar.CORNER_NW_PATTERN
CORNER_NE_PATTERN = cvar.CORNER_NE_PATTERN
CORNER_SW_PATTERN = cvar.CORNER_SW_PATTERN
CORNER_SE_PATTERN = cvar.CORNER_SE_PATTERN
SIDE_N_PATTERN = cvar.SIDE_N_PATTERN
SIDE_W_PATTERN = cvar.SIDE_W_PATTERN
SIDE_E_PATTERN = cvar.SIDE_E_PATTERN
SIDE_S_PATTERN = cvar.SIDE_S_PATTERN
CENTER_PATTERN = cvar.CENTER_PATTERN
FULLBOARD_PATTERN = cvar.FULLBOARD_PATTERN
ALGO_FINALPOS = cvar.ALGO_FINALPOS
ALGO_MOVELIST = cvar.ALGO_MOVELIST
ALGO_HASH_FULL = cvar.ALGO_HASH_FULL
ALGO_HASH_CORNER = cvar.ALGO_HASH_CORNER
ALGO_HASH_CENTER = cvar.ALGO_HASH_CENTER
ALGO_HASH_SIDE = cvar.ALGO_HASH_SIDE
algo_finalpos = cvar.algo_finalpos
algo_movelist = cvar.algo_movelist
algo_hash_full = cvar.algo_hash_full
algo_hash_corner = cvar.algo_hash_corner
algo_intervals = cvar.algo_intervals
algo_hash_center = cvar.algo_hash_center
algo_hash_side = cvar.algo_hash_side
DATE_PROFILE_START = cvar.DATE_PROFILE_START
DATE_PROFILE_END = cvar.DATE_PROFILE_END

class DBError(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libkombilo.DBError_swiginit(self, _libkombilo.new_DBError())
    __swig_destroy__ = _libkombilo.delete_DBError

# Register DBError in _libkombilo:
_libkombilo.DBError_swigregister(DBError)
class Symmetries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dataX = property(_libkombilo.Symmetries_dataX_get, _libkombilo.Symmetries_dataX_set)
    dataY = property(_libkombilo.Symmetries_dataY_get, _libkombilo.Symmetries_dataY_set)
    dataCS = property(_libkombilo.Symmetries_dataCS_get, _libkombilo.Symmetries_dataCS_set)
    sizeX = property(_libkombilo.Symmetries_sizeX_get, _libkombilo.Symmetries_sizeX_set)
    sizeY = property(_libkombilo.Symmetries_sizeY_get, _libkombilo.Symmetries_sizeY_set)
    __swig_destroy__ = _libkombilo.delete_Symmetries

    def __init__(self, *args):
        _libkombilo.Symmetries_swiginit(self, _libkombilo.new_Symmetries(*args))

    def set(self, i, j, k, l, cs):
        return _libkombilo.Symmetries_set(self, i, j, k, l, cs)

    def getX(self, i, j):
        return _libkombilo.Symmetries_getX(self, i, j)

    def getY(self, i, j):
        return _libkombilo.Symmetries_getY(self, i, j)

    def getCS(self, i, j):
        return _libkombilo.Symmetries_getCS(self, i, j)

    def has_key(self, i, j):
        return _libkombilo.Symmetries_has_key(self, i, j)

# Register Symmetries in _libkombilo:
_libkombilo.Symmetries_swigregister(Symmetries)
class Pattern(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    left = property(_libkombilo.Pattern_left_get, _libkombilo.Pattern_left_set)
    right = property(_libkombilo.Pattern_right_get, _libkombilo.Pattern_right_set)
    bottom = property(_libkombilo.Pattern_bottom_get, _libkombilo.Pattern_bottom_set)
    top = property(_libkombilo.Pattern_top_get, _libkombilo.Pattern_top_set)
    boardsize = property(_libkombilo.Pattern_boardsize_get, _libkombilo.Pattern_boardsize_set)
    sizeX = property(_libkombilo.Pattern_sizeX_get, _libkombilo.Pattern_sizeX_set)
    sizeY = property(_libkombilo.Pattern_sizeY_get, _libkombilo.Pattern_sizeY_set)
    flip = property(_libkombilo.Pattern_flip_get, _libkombilo.Pattern_flip_set)
    colorSwitch = property(_libkombilo.Pattern_colorSwitch_get, _libkombilo.Pattern_colorSwitch_set)
    initialPos = property(_libkombilo.Pattern_initialPos_get, _libkombilo.Pattern_initialPos_set)
    finalPos = property(_libkombilo.Pattern_finalPos_get, _libkombilo.Pattern_finalPos_set)
    contLabels = property(_libkombilo.Pattern_contLabels_get, _libkombilo.Pattern_contLabels_set)
    contList = property(_libkombilo.Pattern_contList_get, _libkombilo.Pattern_contList_set)

    def __init__(self, *args):
        _libkombilo.Pattern_swiginit(self, _libkombilo.new_Pattern(*args))
    __swig_destroy__ = _libkombilo.delete_Pattern

    def copy(self, p):
        return _libkombilo.Pattern_copy(self, p)

    def getInitial(self, i, j):
        return _libkombilo.Pattern_getInitial(self, i, j)

    def getFinal(self, i, j):
        return _libkombilo.Pattern_getFinal(self, i, j)

    def BW2XO(self, c):
        return _libkombilo.Pattern_BW2XO(self, c)

    def __eq__(self, p):
        return _libkombilo.Pattern___eq__(self, p)

    def printPattern(self):
        return _libkombilo.Pattern_printPattern(self)

    def to_snv(self, snv):
        return _libkombilo.Pattern_to_snv(self, snv)

    @staticmethod
    def flipsX(i, x, y, XX, YY):
        return _libkombilo.Pattern_flipsX(i, x, y, XX, YY)

    @staticmethod
    def flipsY(i, x, y, XX, YY):
        return _libkombilo.Pattern_flipsY(i, x, y, XX, YY)

    @staticmethod
    def PatternInvFlip(i):
        return _libkombilo.Pattern_PatternInvFlip(i)

    @staticmethod
    def compose_flips(i, j):
        return _libkombilo.Pattern_compose_flips(i, j)

# Register Pattern in _libkombilo:
_libkombilo.Pattern_swigregister(Pattern)
class Continuation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_libkombilo.Continuation_x_get, _libkombilo.Continuation_x_set)
    y = property(_libkombilo.Continuation_y_get, _libkombilo.Continuation_y_set)
    B = property(_libkombilo.Continuation_B_get, _libkombilo.Continuation_B_set)
    W = property(_libkombilo.Continuation_W_get, _libkombilo.Continuation_W_set)
    tB = property(_libkombilo.Continuation_tB_get, _libkombilo.Continuation_tB_set)
    tW = property(_libkombilo.Continuation_tW_get, _libkombilo.Continuation_tW_set)
    wB = property(_libkombilo.Continuation_wB_get, _libkombilo.Continuation_wB_set)
    lB = property(_libkombilo.Continuation_lB_get, _libkombilo.Continuation_lB_set)
    wW = property(_libkombilo.Continuation_wW_get, _libkombilo.Continuation_wW_set)
    lW = property(_libkombilo.Continuation_lW_get, _libkombilo.Continuation_lW_set)
    dates_B = property(_libkombilo.Continuation_dates_B_get, _libkombilo.Continuation_dates_B_set)
    dates_W = property(_libkombilo.Continuation_dates_W_get, _libkombilo.Continuation_dates_W_set)
    label = property(_libkombilo.Continuation_label_get, _libkombilo.Continuation_label_set)
    gamelist = property(_libkombilo.Continuation_gamelist_get, _libkombilo.Continuation_gamelist_set)

    def __init__(self, *args):
        _libkombilo.Continuation_swiginit(self, _libkombilo.new_Continuation(*args))

    def add(self, c):
        return _libkombilo.Continuation_add(self, c)

    def earliest(self):
        return _libkombilo.Continuation_earliest(self)

    def earliest_B(self):
        return _libkombilo.Continuation_earliest_B(self)

    def earliest_W(self):
        return _libkombilo.Continuation_earliest_W(self)

    def latest(self):
        return _libkombilo.Continuation_latest(self)

    def latest_B(self):
        return _libkombilo.Continuation_latest_B(self)

    def latest_W(self):
        return _libkombilo.Continuation_latest_W(self)

    def average_date(self):
        return _libkombilo.Continuation_average_date(self)

    def average_date_B(self):
        return _libkombilo.Continuation_average_date_B(self)

    def average_date_W(self):
        return _libkombilo.Continuation_average_date_W(self)

    def became_popular(self):
        return _libkombilo.Continuation_became_popular(self)

    def became_popular_B(self):
        return _libkombilo.Continuation_became_popular_B(self)

    def became_popular_W(self):
        return _libkombilo.Continuation_became_popular_W(self)

    def became_unpopular(self):
        return _libkombilo.Continuation_became_unpopular(self)

    def became_unpopular_B(self):
        return _libkombilo.Continuation_became_unpopular_B(self)

    def became_unpopular_W(self):
        return _libkombilo.Continuation_became_unpopular_W(self)

    def total(self):
        return _libkombilo.Continuation_total(self)
    __swig_destroy__ = _libkombilo.delete_Continuation

# Register Continuation in _libkombilo:
_libkombilo.Continuation_swigregister(Continuation)
class PatternList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pattern = property(_libkombilo.PatternList_pattern_get, _libkombilo.PatternList_pattern_set)
    fixedColor = property(_libkombilo.PatternList_fixedColor_get, _libkombilo.PatternList_fixedColor_set)
    nextMove = property(_libkombilo.PatternList_nextMove_get, _libkombilo.PatternList_nextMove_set)
    data = property(_libkombilo.PatternList_data_get, _libkombilo.PatternList_data_set)
    symmetries = property(_libkombilo.PatternList_symmetries_get, _libkombilo.PatternList_symmetries_set)
    continuations = property(_libkombilo.PatternList_continuations_get, _libkombilo.PatternList_continuations_set)
    flipTable = property(_libkombilo.PatternList_flipTable_get, _libkombilo.PatternList_flipTable_set)
    special = property(_libkombilo.PatternList_special_get, _libkombilo.PatternList_special_set)

    def __init__(self, p, fColor, nMove, gl):
        _libkombilo.PatternList_swiginit(self, _libkombilo.new_PatternList(p, fColor, nMove, gl))
    __swig_destroy__ = _libkombilo.delete_PatternList

    def patternList(self):
        return _libkombilo.PatternList_patternList(self)

    def get(self, i):
        return _libkombilo.PatternList_get(self, i)

    def size(self):
        return _libkombilo.PatternList_size(self)

# Register PatternList in _libkombilo:
_libkombilo.PatternList_swigregister(PatternList)
class ProcessOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    processVariations = property(_libkombilo.ProcessOptions_processVariations_get, _libkombilo.ProcessOptions_processVariations_set)
    sgfInDB = property(_libkombilo.ProcessOptions_sgfInDB_get, _libkombilo.ProcessOptions_sgfInDB_set)
    rootNodeTags = property(_libkombilo.ProcessOptions_rootNodeTags_get, _libkombilo.ProcessOptions_rootNodeTags_set)
    algos = property(_libkombilo.ProcessOptions_algos_get, _libkombilo.ProcessOptions_algos_set)
    algo_hash_full_maxNumStones = property(_libkombilo.ProcessOptions_algo_hash_full_maxNumStones_get, _libkombilo.ProcessOptions_algo_hash_full_maxNumStones_set)
    algo_hash_corner_maxNumStones = property(_libkombilo.ProcessOptions_algo_hash_corner_maxNumStones_get, _libkombilo.ProcessOptions_algo_hash_corner_maxNumStones_set)
    professional_tag = property(_libkombilo.ProcessOptions_professional_tag_get, _libkombilo.ProcessOptions_professional_tag_set)

    def asString(self):
        return _libkombilo.ProcessOptions_asString(self)

    def validate(self):
        return _libkombilo.ProcessOptions_validate(self)

    def SGFTagsAsStrings(self):
        return _libkombilo.ProcessOptions_SGFTagsAsStrings(self)

    def __init__(self, *args):
        _libkombilo.ProcessOptions_swiginit(self, _libkombilo.new_ProcessOptions(*args))
    __swig_destroy__ = _libkombilo.delete_ProcessOptions

# Register ProcessOptions in _libkombilo:
_libkombilo.ProcessOptions_swigregister(ProcessOptions)
class SearchOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fixedColor = property(_libkombilo.SearchOptions_fixedColor_get, _libkombilo.SearchOptions_fixedColor_set)
    nextMove = property(_libkombilo.SearchOptions_nextMove_get, _libkombilo.SearchOptions_nextMove_set)
    moveLimit = property(_libkombilo.SearchOptions_moveLimit_get, _libkombilo.SearchOptions_moveLimit_set)
    trustHashFull = property(_libkombilo.SearchOptions_trustHashFull_get, _libkombilo.SearchOptions_trustHashFull_set)
    searchInVariations = property(_libkombilo.SearchOptions_searchInVariations_get, _libkombilo.SearchOptions_searchInVariations_set)
    algos = property(_libkombilo.SearchOptions_algos_get, _libkombilo.SearchOptions_algos_set)

    def __init__(self, *args):
        _libkombilo.SearchOptions_swiginit(self, _libkombilo.new_SearchOptions(*args))

    def to_snv(self, snv):
        return _libkombilo.SearchOptions_to_snv(self, snv)
    __swig_destroy__ = _libkombilo.delete_SearchOptions

# Register SearchOptions in _libkombilo:
_libkombilo.SearchOptions_swigregister(SearchOptions)
class VarInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_libkombilo.VarInfo_n_get, _libkombilo.VarInfo_n_set)
    b = property(_libkombilo.VarInfo_b_get, _libkombilo.VarInfo_b_set)
    i = property(_libkombilo.VarInfo_i_get, _libkombilo.VarInfo_i_set)

    def __init__(self, *args):
        _libkombilo.VarInfo_swiginit(self, _libkombilo.new_VarInfo(*args))
    __swig_destroy__ = _libkombilo.delete_VarInfo

# Register VarInfo in _libkombilo:
_libkombilo.VarInfo_swigregister(VarInfo)
class GameList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dbname = property(_libkombilo.GameList_dbname_get, _libkombilo.GameList_dbname_set)
    orderby = property(_libkombilo.GameList_orderby_get, _libkombilo.GameList_orderby_set)
    format1 = property(_libkombilo.GameList_format1_get, _libkombilo.GameList_format1_set)
    format2 = property(_libkombilo.GameList_format2_get, _libkombilo.GameList_format2_set)
    numColumns = property(_libkombilo.GameList_numColumns_get, _libkombilo.GameList_numColumns_set)
    processVariations = property(_libkombilo.GameList_processVariations_get, _libkombilo.GameList_processVariations_set)
    boardsize = property(_libkombilo.GameList_boardsize_get, _libkombilo.GameList_boardsize_set)
    algo_ps = property(_libkombilo.GameList_algo_ps_get, _libkombilo.GameList_algo_ps_set)
    current = property(_libkombilo.GameList_current_get, _libkombilo.GameList_current_set)
    db = property(_libkombilo.GameList_db_get, _libkombilo.GameList_db_set)
    labels = property(_libkombilo.GameList_labels_get, _libkombilo.GameList_labels_set)
    continuations = property(_libkombilo.GameList_continuations_get, _libkombilo.GameList_continuations_set)
    num_hits = property(_libkombilo.GameList_num_hits_get, _libkombilo.GameList_num_hits_set)
    num_switched = property(_libkombilo.GameList_num_switched_get, _libkombilo.GameList_num_switched_set)
    Bwins = property(_libkombilo.GameList_Bwins_get, _libkombilo.GameList_Bwins_set)
    BwinsG = property(_libkombilo.GameList_BwinsG_get, _libkombilo.GameList_BwinsG_set)
    BwinsAll = property(_libkombilo.GameList_BwinsAll_get, _libkombilo.GameList_BwinsAll_set)
    Wwins = property(_libkombilo.GameList_Wwins_get, _libkombilo.GameList_Wwins_set)
    WwinsG = property(_libkombilo.GameList_WwinsG_get, _libkombilo.GameList_WwinsG_set)
    WwinsAll = property(_libkombilo.GameList_WwinsAll_get, _libkombilo.GameList_WwinsAll_set)
    mrs_pattern = property(_libkombilo.GameList_mrs_pattern_get, _libkombilo.GameList_mrs_pattern_set)
    searchOptions = property(_libkombilo.GameList_searchOptions_get, _libkombilo.GameList_searchOptions_set)
    dates_all = property(_libkombilo.GameList_dates_all_get, _libkombilo.GameList_dates_all_set)
    dates_all_per_year = property(_libkombilo.GameList_dates_all_per_year_get, _libkombilo.GameList_dates_all_per_year_set)
    dates_current = property(_libkombilo.GameList_dates_current_get, _libkombilo.GameList_dates_current_set)

    def __init__(self, *args):
        _libkombilo.GameList_swiginit(self, _libkombilo.new_GameList(*args))
    __swig_destroy__ = _libkombilo.delete_GameList

    def process(self, sgf, path, fn, glists, DBTREE=None, flags=0):
        return _libkombilo.GameList_process(self, sgf, path, fn, glists, DBTREE, flags)

    def process_results(self, i=0):
        return _libkombilo.GameList_process_results(self, i)

    def start_processing(self, PROCESSVARIATIONS=-1):
        return _libkombilo.GameList_start_processing(self, PROCESSVARIATIONS)

    def finalize_processing(self):
        return _libkombilo.GameList_finalize_processing(self)

    def search(self, pattern, options=None):
        return _libkombilo.GameList_search(self, pattern, options)

    def lookupLabel(self, x, y):
        return _libkombilo.GameList_lookupLabel(self, x, y)

    def setLabel(self, x, y, label):
        return _libkombilo.GameList_setLabel(self, x, y, label)

    def lookupContinuation(self, x, y):
        return _libkombilo.GameList_lookupContinuation(self, x, y)

    def numHits(self):
        return _libkombilo.GameList_numHits(self)

    def sigsearch(self, sig):
        return _libkombilo.GameList_sigsearch(self, sig)

    def sigsearchNC(self, sig):
        return _libkombilo.GameList_sigsearchNC(self, sig)

    def getSignature(self, i):
        return _libkombilo.GameList_getSignature(self, i)

    def gisearch(self, sql, complete=0):
        return _libkombilo.GameList_gisearch(self, sql, complete)

    def gisearchNC(self, sql, complete=0):
        return _libkombilo.GameList_gisearchNC(self, sql, complete)

    def tagsearch(self, tag):
        return _libkombilo.GameList_tagsearch(self, tag)

    def tagsearchSQL(self, query):
        return _libkombilo.GameList_tagsearchSQL(self, query)

    def setTag(self, tag, start=0, end=0):
        return _libkombilo.GameList_setTag(self, tag, start, end)

    def setTagID(self, tag, i):
        return _libkombilo.GameList_setTagID(self, tag, i)

    def getTagsID(self, i, tag=0):
        return _libkombilo.GameList_getTagsID(self, i, tag)

    def deleteTag(self, tag, i=-1):
        return _libkombilo.GameList_deleteTag(self, tag, i)

    def getTags(self, i, tag=0):
        return _libkombilo.GameList_getTags(self, i, tag)

    def export_tags(self, tag_db_name, which_tags):
        return _libkombilo.GameList_export_tags(self, tag_db_name, which_tags)

    def import_tags(self, tag_db_name):
        return _libkombilo.GameList_import_tags(self, tag_db_name)

    def snapshot(self):
        return _libkombilo.GameList_snapshot(self)

    def restore(self, handle, _del=False):
        return _libkombilo.GameList_restore(self, handle, _del)

    def delete_snapshot(self, handle):
        return _libkombilo.GameList_delete_snapshot(self, handle)

    def delete_all_snapshots(self):
        return _libkombilo.GameList_delete_all_snapshots(self)

    def reset(self):
        return _libkombilo.GameList_reset(self)

    def resetFormat(self, *args):
        return _libkombilo.GameList_resetFormat(self, *args)

    def size(self):
        return _libkombilo.GameList_size(self)

    def size_all(self):
        return _libkombilo.GameList_size_all(self)

    def get_resultsStr(self, i):
        return _libkombilo.GameList_get_resultsStr(self, i)

    def resultsStr(self, gle):
        return _libkombilo.GameList_resultsStr(self, gle)

    def find_by_ID(self, ID):
        return _libkombilo.GameList_find_by_ID(self, ID)

    def get_gameInfoStr(self, i):
        return _libkombilo.GameList_get_gameInfoStr(self, i)

    def get_currentList_entry(self, i):
        return _libkombilo.GameList_get_currentList_entry(self, i)

    def currentEntryAsString(self, i):
        return _libkombilo.GameList_currentEntryAsString(self, i)

    def currentEntriesAsStrings(self, start=0, end=0):
        return _libkombilo.GameList_currentEntriesAsStrings(self, start, end)

    def getSGF(self, i):
        return _libkombilo.GameList_getSGF(self, i)

    def getCurrentProperty(self, i, tag):
        return _libkombilo.GameList_getCurrentProperty(self, i, tag)

    def plSize(self):
        return _libkombilo.GameList_plSize(self)

    def plEntry(self, i):
        return _libkombilo.GameList_plEntry(self, i)

# Register GameList in _libkombilo:
_libkombilo.GameList_swigregister(GameList)
CHECK_FOR_DUPLICATES = cvar.CHECK_FOR_DUPLICATES
CHECK_FOR_DUPLICATES_STRICT = cvar.CHECK_FOR_DUPLICATES_STRICT
OMIT_DUPLICATES = cvar.OMIT_DUPLICATES
OMIT_GAMES_WITH_SGF_ERRORS = cvar.OMIT_GAMES_WITH_SGF_ERRORS
UNACCEPTABLE_BOARDSIZE = cvar.UNACCEPTABLE_BOARDSIZE
SGF_ERROR = cvar.SGF_ERROR
IS_DUPLICATE = cvar.IS_DUPLICATE
NOT_INSERTED_INTO_DB = cvar.NOT_INSERTED_INTO_DB
INDEX_OUT_OF_RANGE = cvar.INDEX_OUT_OF_RANGE


def find_duplicates(glists, strict=False, dupl_within_db=False):
    return _libkombilo.find_duplicates(glists, strict, dupl_within_db)
class vectorMNC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libkombilo.vectorMNC_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libkombilo.vectorMNC___nonzero__(self)

    def __bool__(self):
        return _libkombilo.vectorMNC___bool__(self)

    def __len__(self):
        return _libkombilo.vectorMNC___len__(self)

    def __getslice__(self, i, j):
        return _libkombilo.vectorMNC___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libkombilo.vectorMNC___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libkombilo.vectorMNC___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libkombilo.vectorMNC___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libkombilo.vectorMNC___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libkombilo.vectorMNC___setitem__(self, *args)

    def pop(self):
        return _libkombilo.vectorMNC_pop(self)

    def append(self, x):
        return _libkombilo.vectorMNC_append(self, x)

    def empty(self):
        return _libkombilo.vectorMNC_empty(self)

    def size(self):
        return _libkombilo.vectorMNC_size(self)

    def swap(self, v):
        return _libkombilo.vectorMNC_swap(self, v)

    def begin(self):
        return _libkombilo.vectorMNC_begin(self)

    def end(self):
        return _libkombilo.vectorMNC_end(self)

    def rbegin(self):
        return _libkombilo.vectorMNC_rbegin(self)

    def rend(self):
        return _libkombilo.vectorMNC_rend(self)

    def clear(self):
        return _libkombilo.vectorMNC_clear(self)

    def get_allocator(self):
        return _libkombilo.vectorMNC_get_allocator(self)

    def pop_back(self):
        return _libkombilo.vectorMNC_pop_back(self)

    def erase(self, *args):
        return _libkombilo.vectorMNC_erase(self, *args)

    def __init__(self, *args):
        _libkombilo.vectorMNC_swiginit(self, _libkombilo.new_vectorMNC(*args))

    def push_back(self, x):
        return _libkombilo.vectorMNC_push_back(self, x)

    def front(self):
        return _libkombilo.vectorMNC_front(self)

    def back(self):
        return _libkombilo.vectorMNC_back(self)

    def assign(self, n, x):
        return _libkombilo.vectorMNC_assign(self, n, x)

    def resize(self, *args):
        return _libkombilo.vectorMNC_resize(self, *args)

    def insert(self, *args):
        return _libkombilo.vectorMNC_insert(self, *args)

    def reserve(self, n):
        return _libkombilo.vectorMNC_reserve(self, n)

    def capacity(self):
        return _libkombilo.vectorMNC_capacity(self)
    __swig_destroy__ = _libkombilo.delete_vectorMNC

# Register vectorMNC in _libkombilo:
_libkombilo.vectorMNC_swigregister(vectorMNC)
HANDI_TAG = cvar.HANDI_TAG
PROFESSIONAL_TAG = cvar.PROFESSIONAL_TAG

class vectorM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libkombilo.vectorM_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libkombilo.vectorM___nonzero__(self)

    def __bool__(self):
        return _libkombilo.vectorM___bool__(self)

    def __len__(self):
        return _libkombilo.vectorM___len__(self)

    def __getslice__(self, i, j):
        return _libkombilo.vectorM___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libkombilo.vectorM___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libkombilo.vectorM___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libkombilo.vectorM___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libkombilo.vectorM___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libkombilo.vectorM___setitem__(self, *args)

    def pop(self):
        return _libkombilo.vectorM_pop(self)

    def append(self, x):
        return _libkombilo.vectorM_append(self, x)

    def empty(self):
        return _libkombilo.vectorM_empty(self)

    def size(self):
        return _libkombilo.vectorM_size(self)

    def swap(self, v):
        return _libkombilo.vectorM_swap(self, v)

    def begin(self):
        return _libkombilo.vectorM_begin(self)

    def end(self):
        return _libkombilo.vectorM_end(self)

    def rbegin(self):
        return _libkombilo.vectorM_rbegin(self)

    def rend(self):
        return _libkombilo.vectorM_rend(self)

    def clear(self):
        return _libkombilo.vectorM_clear(self)

    def get_allocator(self):
        return _libkombilo.vectorM_get_allocator(self)

    def pop_back(self):
        return _libkombilo.vectorM_pop_back(self)

    def erase(self, *args):
        return _libkombilo.vectorM_erase(self, *args)

    def __init__(self, *args):
        _libkombilo.vectorM_swiginit(self, _libkombilo.new_vectorM(*args))

    def push_back(self, x):
        return _libkombilo.vectorM_push_back(self, x)

    def front(self):
        return _libkombilo.vectorM_front(self)

    def back(self):
        return _libkombilo.vectorM_back(self)

    def assign(self, n, x):
        return _libkombilo.vectorM_assign(self, n, x)

    def resize(self, *args):
        return _libkombilo.vectorM_resize(self, *args)

    def insert(self, *args):
        return _libkombilo.vectorM_insert(self, *args)

    def reserve(self, n):
        return _libkombilo.vectorM_reserve(self, n)

    def capacity(self):
        return _libkombilo.vectorM_capacity(self)
    __swig_destroy__ = _libkombilo.delete_vectorM

# Register vectorM in _libkombilo:
_libkombilo.vectorM_swigregister(vectorM)
class vectorGL(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libkombilo.vectorGL_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libkombilo.vectorGL___nonzero__(self)

    def __bool__(self):
        return _libkombilo.vectorGL___bool__(self)

    def __len__(self):
        return _libkombilo.vectorGL___len__(self)

    def __getslice__(self, i, j):
        return _libkombilo.vectorGL___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libkombilo.vectorGL___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libkombilo.vectorGL___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libkombilo.vectorGL___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libkombilo.vectorGL___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libkombilo.vectorGL___setitem__(self, *args)

    def pop(self):
        return _libkombilo.vectorGL_pop(self)

    def append(self, x):
        return _libkombilo.vectorGL_append(self, x)

    def empty(self):
        return _libkombilo.vectorGL_empty(self)

    def size(self):
        return _libkombilo.vectorGL_size(self)

    def swap(self, v):
        return _libkombilo.vectorGL_swap(self, v)

    def begin(self):
        return _libkombilo.vectorGL_begin(self)

    def end(self):
        return _libkombilo.vectorGL_end(self)

    def rbegin(self):
        return _libkombilo.vectorGL_rbegin(self)

    def rend(self):
        return _libkombilo.vectorGL_rend(self)

    def clear(self):
        return _libkombilo.vectorGL_clear(self)

    def get_allocator(self):
        return _libkombilo.vectorGL_get_allocator(self)

    def pop_back(self):
        return _libkombilo.vectorGL_pop_back(self)

    def erase(self, *args):
        return _libkombilo.vectorGL_erase(self, *args)

    def __init__(self, *args):
        _libkombilo.vectorGL_swiginit(self, _libkombilo.new_vectorGL(*args))

    def push_back(self, x):
        return _libkombilo.vectorGL_push_back(self, x)

    def front(self):
        return _libkombilo.vectorGL_front(self)

    def back(self):
        return _libkombilo.vectorGL_back(self)

    def assign(self, n, x):
        return _libkombilo.vectorGL_assign(self, n, x)

    def resize(self, *args):
        return _libkombilo.vectorGL_resize(self, *args)

    def insert(self, *args):
        return _libkombilo.vectorGL_insert(self, *args)

    def reserve(self, n):
        return _libkombilo.vectorGL_reserve(self, n)

    def capacity(self):
        return _libkombilo.vectorGL_capacity(self)
    __swig_destroy__ = _libkombilo.delete_vectorGL

# Register vectorGL in _libkombilo:
_libkombilo.vectorGL_swigregister(vectorGL)

